# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ezvAzU3ApAMTym-N3td6u7Y2kpXU_HI3
"""

# backtest.py
import pandas as pd
import numpy as np
import xgboost as xgb
import matplotlib.pyplot as plt
import io
from sklearn.metrics import mean_squared_error

print("--- Starting Backtesting ---")

# --- 1. Data Loading and Feature Engineering (Must be IDENTICAL to train.py) ---
csv_data = """Date,Price,vader_score
2023-01-01,150.0,0.10
2023-01-02,152.5,0.25
2023-01-03,151.0,-0.15
2023-01-04,155.0,0.50
2023-01-05,157.2,0.65
2023-01-06,156.8,-0.05
"""
for i in range(200):
    prev_price = float(csv_data.strip().split('\n')[-1].split(',')[1])
    new_price = prev_price + np.random.uniform(-2, 2.2)
    new_sentiment = np.random.uniform(-0.5, 0.8)
    csv_data += f"2023-01-{7+i},{new_price:.2f},{new_sentiment:.2f}\n"

# In your real code, you would use:
# df = pd.read_csv("your_data_file.csv")
df = pd.read_csv(io.StringIO(csv_data))
print("Data loaded successfully.")

n_lags = 3
for lag in range(1, n_lags + 1):
    df[f'sentiment_lag_{lag}'] = df['vader_score'].shift(lag)
    df[f'price_lag_{lag}'] = df['Price'].shift(lag)
df = df.dropna().reset_index(drop=True)
print("Feature engineering complete.")

# --- 2. Load the Pre-trained Model ---
model_filename = "xgb_model.json"
model = xgb.XGBRegressor()
model.load_model(model_filename)
print(f"Model '{model_filename}' loaded successfully.")

# --- 3. Prepare Test Data and Make Predictions ---
X = df[[col for col in df.columns if 'lag' in col]]
split_point = int(len(df) * 0.8)
X_test = X[split_point:]

y_pred = model.predict(X_test)
print("Predictions made on the test set.")

# --- 4. Backtesting Function ---
def run_simple_backtest(df, initial_cash=10000.0, threshold=0.0):
    df = df.copy().reset_index().rename(columns={'index': 'idx'})
    cash, shares, history = float(initial_cash), 0.0, []
    for _, row in df.iterrows():
        price, pred_next, idx = float(row['close']), float(row['predicted_next']), row['idx']
        trade_action = None
        if pred_next > price * (1 + threshold) and cash > price:
            if shares == 0:
                shares, cash, trade_action = cash / price, 0.0, 'BUY'
        elif pred_next < price * (1 - threshold):
            if shares > 0:
                cash, shares, trade_action = cash + shares * price, 0.0, 'SELL'
        portfolio_value = cash + (shares * price)
        history.append({'idx': idx, 'close': price, 'predicted_next': pred_next, 'cash': cash, 'shares': shares, 'portfolio_value': portfolio_value, 'trade': trade_action})
    results_df = pd.DataFrame(history)
    metrics = {'final_portfolio': results_df['portfolio_value'].iloc[-1], 'total_return': results_df['portfolio_value'].iloc[-1] / initial_cash - 1}
    return results_df, metrics

# --- 5. Run the Backtest ---
df_backtest = df.iloc[split_point:].copy().rename(columns={'Price': 'close'})
predictions_series = pd.Series(y_pred, index=X_test.index)
df_backtest['predicted_next'] = predictions_series.shift(-1)
df_backtest.dropna(inplace=True)

results, metrics = run_simple_backtest(df_backtest, initial_cash=10000, threshold=-0.005)
print("\nBacktest Metrics (Aggressive Strategy):", metrics)

# --- 6. Plotting Results ---
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10), sharex=True)
fig.suptitle('Backtest Performance (Aggressive Strategy)', fontsize=16)
ax1.plot(results['idx'], results['portfolio_value'], label='Portfolio Value', color='blue')
ax1.set_ylabel('Portfolio Value ($)'), ax1.set_title('Portfolio Value Over Time'), ax1.legend(), ax1.grid(True)
ax2.plot(results['idx'], results['close'], label='Close Price', color='orange')
ax2.set_xlabel('Time Index'), ax2.set_ylabel('Asset Close Price ($)'), ax2.set_title('Asset Price and Trades')
buy_signals = results[results['trade'] == 'BUY']
sell_signals = results[results['trade'] == 'SELL']
ax2.plot(buy_signals['idx'], buy_signals['close'], '^', color='g', markersize=10, label='Buy Signal')
ax2.plot(sell_signals['idx'], sell_signals['close'], 'v', color='r', markersize=10, label='Sell Signal')
ax2.legend(), ax2.grid(True)
plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()
print("--- Backtesting Script Finished ---")